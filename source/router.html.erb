---
title: Onespark Router Debug
stylesheets: [routerdebug]
---

<script src="http://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript">
var m = [20, 120, 20, 120],
    w = 1280 - m[1] - m[3],
    h = 800 - m[0] - m[2],
    i = 0,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

tree.children(function(d) {
  return d.states;
});

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("body").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");


function extractRoute(x) {
  var result = {};
  result.original = x;
  result.name = x.get("name");
  result.route = x.get("route");
  result.tool = x.get("toolName");
  result.context = x.get("contextMenu");
  result.states = x.get("childStates").map(function(y){ return extractRoute(y);});
  if (result.states.length==0) result.states=null;
  return result;
}


var init = function() {
  root = extractRoute(App.get("router.childStates.0"));
  console.log(root);
  root.x0 = h / 2;
  root.y0 = 0;

  function toggleAll(d) {
    if (d.states) {
      d.states.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  /*troot.states.forEach(toggleAll);
  toggle(root.states[1]);
  toggle(root.states[1].states[2]);
  toggle(root.states[9]);
  toggle(root.states[9].states[0]);*/

  update(root);
}.observes("App.router.childStates");
init();
function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._states ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.states || d._states ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("class","name")
      .attr("text-anchor", function(d) { return d.states || d._states ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);
  
  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.states || d._states ? -10 : 10; })
      .attr("dy", "1.35em")
      .attr("class","route")
      .attr("text-anchor", function(d) { return d.states || d._states ? "end" : "start"; })
      .text(function(d) { return d.route; })
      .style("fill-opacity", 1e-6);

  nodeEnter.append("svg:text")
      .attr("transform", "matrix(0.93899695,-0.34392546,0.34392546,0.93899695,10,-5)")
      .text(function(d) { return d.context; })
      .attr("class","context")
      .style("fill-opacity", 1e-6);
      
                  
  nodeEnter.append("svg:text")
      .attr("x", function(d) { return 0 })
      .attr("dy", "-15")
      .attr("text-anchor", function(d) { return "middle"; })
      .text(function(d) { return d.tool; })
      .attr("class","tool")
      .style("fill-opacity", 1e-6);
      
  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._states ? "lightsteelblue" : "#fff"; });

  nodeUpdate.selectAll("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle states.
function toggle(d) {
  if (d.states) {
    d._states = d.states;
    d.states = null;
  } else {
    d.states = d._states;
    d._states = null;
  }
}
</script>
